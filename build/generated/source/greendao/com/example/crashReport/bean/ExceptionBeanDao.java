package com.example.crashReport.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXCEPTION_BEAN".
*/
public class ExceptionBeanDao extends AbstractDao<ExceptionBean, Long> {

    public static final String TABLENAME = "EXCEPTION_BEAN";

    /**
     * Properties of entity ExceptionBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uuid = new Property(1, String.class, "uuid", false, "UUID");
        public final static Property AppUser = new Property(2, String.class, "appUser", false, "APP_USER");
        public final static Property AppName = new Property(3, String.class, "appName", false, "APP_NAME");
        public final static Property ExceptionCode = new Property(4, String.class, "exceptionCode", false, "EXCEPTION_CODE");
        public final static Property ExceptionMsg = new Property(5, String.class, "exceptionMsg", false, "EXCEPTION_MSG");
        public final static Property ExceptionStack = new Property(6, String.class, "exceptionStack", false, "EXCEPTION_STACK");
        public final static Property CreationDate = new Property(7, String.class, "creationDate", false, "CREATION_DATE");
        public final static Property SubmitStatus = new Property(8, String.class, "submitStatus", false, "SUBMIT_STATUS");
        public final static Property AppVersion = new Property(9, String.class, "appVersion", false, "APP_VERSION");
        public final static Property AppChannel = new Property(10, String.class, "appChannel", false, "APP_CHANNEL");
        public final static Property IsDebug = new Property(11, String.class, "isDebug", false, "IS_DEBUG");
        public final static Property DeviceUuid = new Property(12, String.class, "deviceUuid", false, "DEVICE_UUID");
        public final static Property DeviceInfo = new Property(13, String.class, "deviceInfo", false, "DEVICE_INFO");
    }


    public ExceptionBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ExceptionBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXCEPTION_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"UUID\" TEXT," + // 1: uuid
                "\"APP_USER\" TEXT," + // 2: appUser
                "\"APP_NAME\" TEXT," + // 3: appName
                "\"EXCEPTION_CODE\" TEXT," + // 4: exceptionCode
                "\"EXCEPTION_MSG\" TEXT," + // 5: exceptionMsg
                "\"EXCEPTION_STACK\" TEXT," + // 6: exceptionStack
                "\"CREATION_DATE\" TEXT," + // 7: creationDate
                "\"SUBMIT_STATUS\" TEXT," + // 8: submitStatus
                "\"APP_VERSION\" TEXT," + // 9: appVersion
                "\"APP_CHANNEL\" TEXT," + // 10: appChannel
                "\"IS_DEBUG\" TEXT," + // 11: isDebug
                "\"DEVICE_UUID\" TEXT," + // 12: deviceUuid
                "\"DEVICE_INFO\" TEXT);"); // 13: deviceInfo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXCEPTION_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ExceptionBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
 
        String appUser = entity.getAppUser();
        if (appUser != null) {
            stmt.bindString(3, appUser);
        }
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(4, appName);
        }
 
        String exceptionCode = entity.getExceptionCode();
        if (exceptionCode != null) {
            stmt.bindString(5, exceptionCode);
        }
 
        String exceptionMsg = entity.getExceptionMsg();
        if (exceptionMsg != null) {
            stmt.bindString(6, exceptionMsg);
        }
 
        String exceptionStack = entity.getExceptionStack();
        if (exceptionStack != null) {
            stmt.bindString(7, exceptionStack);
        }
 
        String creationDate = entity.getCreationDate();
        if (creationDate != null) {
            stmt.bindString(8, creationDate);
        }
 
        String submitStatus = entity.getSubmitStatus();
        if (submitStatus != null) {
            stmt.bindString(9, submitStatus);
        }
 
        String appVersion = entity.getAppVersion();
        if (appVersion != null) {
            stmt.bindString(10, appVersion);
        }
 
        String appChannel = entity.getAppChannel();
        if (appChannel != null) {
            stmt.bindString(11, appChannel);
        }
 
        String isDebug = entity.getIsDebug();
        if (isDebug != null) {
            stmt.bindString(12, isDebug);
        }
 
        String deviceUuid = entity.getDeviceUuid();
        if (deviceUuid != null) {
            stmt.bindString(13, deviceUuid);
        }
 
        String deviceInfo = entity.getDeviceInfo();
        if (deviceInfo != null) {
            stmt.bindString(14, deviceInfo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ExceptionBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
 
        String appUser = entity.getAppUser();
        if (appUser != null) {
            stmt.bindString(3, appUser);
        }
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(4, appName);
        }
 
        String exceptionCode = entity.getExceptionCode();
        if (exceptionCode != null) {
            stmt.bindString(5, exceptionCode);
        }
 
        String exceptionMsg = entity.getExceptionMsg();
        if (exceptionMsg != null) {
            stmt.bindString(6, exceptionMsg);
        }
 
        String exceptionStack = entity.getExceptionStack();
        if (exceptionStack != null) {
            stmt.bindString(7, exceptionStack);
        }
 
        String creationDate = entity.getCreationDate();
        if (creationDate != null) {
            stmt.bindString(8, creationDate);
        }
 
        String submitStatus = entity.getSubmitStatus();
        if (submitStatus != null) {
            stmt.bindString(9, submitStatus);
        }
 
        String appVersion = entity.getAppVersion();
        if (appVersion != null) {
            stmt.bindString(10, appVersion);
        }
 
        String appChannel = entity.getAppChannel();
        if (appChannel != null) {
            stmt.bindString(11, appChannel);
        }
 
        String isDebug = entity.getIsDebug();
        if (isDebug != null) {
            stmt.bindString(12, isDebug);
        }
 
        String deviceUuid = entity.getDeviceUuid();
        if (deviceUuid != null) {
            stmt.bindString(13, deviceUuid);
        }
 
        String deviceInfo = entity.getDeviceInfo();
        if (deviceInfo != null) {
            stmt.bindString(14, deviceInfo);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ExceptionBean readEntity(Cursor cursor, int offset) {
        ExceptionBean entity = new ExceptionBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uuid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // appUser
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // appName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // exceptionCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // exceptionMsg
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // exceptionStack
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // creationDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // submitStatus
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // appVersion
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // appChannel
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // isDebug
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // deviceUuid
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // deviceInfo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ExceptionBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAppUser(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAppName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExceptionCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setExceptionMsg(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setExceptionStack(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreationDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSubmitStatus(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAppVersion(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAppChannel(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsDebug(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDeviceUuid(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDeviceInfo(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ExceptionBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ExceptionBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ExceptionBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
